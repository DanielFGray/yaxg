#!/usr/bin/env bash

declare file='%FT%R:%S%:z_$wx$h'
declare mode='webm'
declare select=0
declare duration
declare delay=0
declare verbose
declare callback
declare -a slop_args
declare -r config_dir="${XDG_CONFIG_DIR:-$HOME/.config}/yaxg"
declare -r config_file="${config_dir}/conf"
declare -A dimensions
declare -A colors
colors[red]=$(tput setaf 1)
colors[blue]=$(tput setaf 4)
colors[reset]=$(tput sgr0)

usage() {
  LESS=-FEXR less <<HELP
Usage: yaxg [OPTIONS] [FILE]
records and saves regions of X11 displays

OPTIONS:

  -d  specify duration to record for (only works for webms and gifs)
  -D  specify delay
  -F  overwrite file if it exists
  -s  select a region or window
  -S  pass a arguments directly to slop
  -e  execute a script in the config dir or a callback string with the current $SHELL
  -g  save as gif (will be overridden by file extension)
  -p  save as png (will be overridden by file extension)
  -w  save as webm (will be overridden by file extension)
      this is the default behavior when -g or -p is not present and the
      filename doesn't end in png or gif
      press Ctrl+C to stop recording or run \`yaxg stop\`
  -v  increase ffmpeg verbosity (can be stacked)
  -h  print this help


SPECIAL STRINGS

Similar to \`scrot\`, the callback and filename parameters can take format
specifiers that are expanded when encountered. Characters preceded by
'%' are interpreted directly by the \`date\` commmand. See \`man date\` for examples.
Characters preceded by '$' are parsed by yaxg and expanded as such:

  \$f  quoted image path/filename (only available in callback)
  \$w  image width
  \$h  image height


CONFIGURATION:

A configuration file can saved at ${config_file/$HOME/\~}
If a line begins with '#' it is treated as a comment and ignored
The config file accepts the following values:

  callback
    a callback string to execute
  filename
    a default filename to use when none is provided (must not include extension)
    defaults to %FT%R:%S:%:z_\$wx\$h
  format
    default format to use, must be either 'png', 'webm', or 'gif'
  slop
    arguments to be passed to slop


EXAMPLES:

  yaxg '%s-\$w-\$h'
  yaxg '%s-\$w-\$h' -e 'mv \$f ~/images/\$f'
  yaxg -s -S '-l -c 0.3,0.4,0.6,0.4' -e 'mv \$f ~/images/\$f && firefox ~/images/\$f'
  printf '#!/usr/bin/env bash\n[[ "\$1" =~ png$ ]] && optipng "\$1"\n' \\
    > ~/.config/yaxg/myScript && chmod +x !#:3 && yaxg -e 'myScript'
HELP
}

in_term() {
  [[ -t 0 || -p /dev/stdin ]]
}

info() {
  local str
  if in_term; then
    printf "${colors[blue]}%s${colors[reset]}\n" "$*" > /dev/tty
  else
    notify-send 'yaxg' "$*"
  fi
}

err() {
  local str
  if in_term; then
    printf "${colors[red]}%s${colors[reset]}\n" "$@" >&2
  else
    str=$(printf '%s' "$@")
    notify-send -t 3000 -u critical 'yaxg' "$str"
  fi
}

die() {
  [[ -n "$1" ]] && err "$1"
  exit 1
}

has() {
  local v=0
  if [[ $1 = '-v' ]]; then
    v=1
    shift
  fi
  for c; do c="${c%% *}"
    if ! command -v "$c" &> /dev/null; then
      (( v > 0 )) && err "$c not found"
      return 1
    fi
  done
}

ask() {
  if in_term; then
    read -r -n1 -p "$* " ans <> /dev/tty
    printf '\n'
    [[ ${ans^} = Y* ]]
  else
    zenity --question --text="$*"
  fi
}

delay() {
  (( delay > 0 )) && for (( i=delay; i > 0; --i )); do
    if in_term; then
      printf '%s..                     \r' "$i" > /dev/tty
    else
      notify-send -t 1000 "$i.."
    fi
    sleep 1
  done
}

get_dimensions() {
  local scrsize
  if (( select == 1 )); then
    has -v slop || die
    (( verbose > 0 )) && info 'select a region'
    scrsize=$(slop "${slop_args[@]}" -f "['x']='%x' ['y']='%y' ['w']='%w' ['h']='%h'") || die 'cancelled'
    eval "dimensions=( $scrsize )"
  else
    has -v xdpyinfo || die
    scrsize=$(xdpyinfo | awk '/dimensions/{print $2}')
    dimensions=( ['x']='0' ['y']='0' ['w']="${scrsize%%x*}" ['h']="${scrsize#*x}" )
  fi
}

record_gif() {
  byzanz-record \
    --duration="${duration:-10}" \
    --x="${dimensions['x']}" \
    --y="${dimensions['y']}" \
    --width="${dimensions['w']}" \
    --height="${dimensions['h']}" \
    "$file"
}

record_webm() {
  local loglevel size offset
  loglevel='fatal'
  (( verbose > 0 )) && loglevel=$(( verbose * 8 ))
  size="${dimensions['w']}x${dimensions['h']}"
  offset="${DISPLAY}.0+${dimensions['x']},${dimensions['y']}"
  ffmpeg -y -loglevel "$loglevel" \
    -f x11grab \
    -s "$size" \
    -i "$offset" \
    ${duration:+-t $duration} \
    -c:v libvpx \
    -b:v 2400k \
    -preset veryslow \
    -r 60 \
    -threads 4 \
    -pix_fmt yuv444p \
    -f webm "$file"
}

record_png() {
  local geometry
  printf -v geometry "%dx%d+%d+%d" "${dimensions[w]}" "${dimensions[h]}" "${dimensions[x]}" "${dimensions[y]}"
  maim -g "$geometry" "$file"
}

parse_file_str() {
  local str h w
  str=$(date +"$1")
  str="${str//\$h/${dimensions[h]}}"
  str="${str//\$w/${dimensions[w]}}"
  printf '%s' "$str"
}

parse_callback_str() {
  local str
  str=$(parse_file_str "$1")
  str="${str//\$f/\"$file\"}"
  printf '%s' "$str"
}

parse_config_file() {
  local line k v nr=0
  config_err=()
  while IFS= read -r line; do
    (( ++nr ))
    [[ -z "$line" || "$line" = '#'* ]] && continue
    read -r key <<< "${line%% *}"
    read -r val <<< "${line#* }"
    if [[ -z "$val" ]]; then
      config_err+=( "missing value for \"$key\" in config file on line $nr" )
      continue
    fi
    case "$key" in
      callback) callback="$val" ;;
      filename) file="$val" ;;
      format)
        if [[ $val =~ png|webm|gif ]]; then
          mode="$val"
        else
          config_err+=( "unknown format \"$val\" in config file on line $nr" )
        fi
        ;;
      slop) slop_args=( $val ) ;;
      *) config_err+=( "unknown key \"$key\" in config file on line $nr" )
    esac
  done < "$config_file"
  if (( ${#config_err[@]} > 0 )); then
    err 'there were errors parsing config file:'
    for e in "${config_err[@]}"; do
      err "  $e"
    done
  fi
}

if [[ "$1" = 'stop' ]] || pgrep -f 'x11grab'; then
  pkill -f x11grab || die 'x11grab not running'
  exit
fi

[[ -s "$config_file" ]] && parse_config_file

OPTERR=0
while getopts "d:D:e:FghpsS:vw" opt; do
  case "$opt" in
    d) duration="$OPTARG" ;;
    D) delay="$OPTARG" ;;
    e) callback="$OPTARG" ;;
    F) overwrite=1 ;;
    g) mode='gif' ;;
    h) usage; exit 0 ;;
    p) mode='png' ;;
    s) select=1 ;;
    S) slop_args=( $OPTARG ) ;;
    v) (( ++verbose )) ;;
    w) mode='webm' ;;
  esac
done
shift $((OPTIND-1))
unset opt OPTARG OPTIND OPTERR

if (( $# == 1 )); then
  file="$1"
  shift
elif (( $# > 1 )); then
  die 'too many filename arguments'
fi

[[ -n "$DISPLAY" ]] || die 'Could not grab DISPLAY'
has -v date realpath || die

file=$(realpath -mL "$file")

if [[ -f "$file" ]] && (( overwrite == 0 )); then
  ask "\"$file\" already exists. Overwrite? " || die
fi

get_dimensions

case "$file" in
  *.gif)
    has byzanz-record || die 'need byzanz-record for recording gifs'
    mode='gif' ;;
  *.png)
    has maim || die 'need maim for capturing screenshots'
    mode='png' ;;
  *.webm)
    has ffmpeg || die 'need ffmpeg for recording webms'
    mode='webm' ;;
  *)
    case "$mode" in
      gif) file+='.gif' ;;
      webm) file+='.webm' ;;
      png) file+='.png' ;;
    esac
esac
file=$(parse_file_str "$file")

delay
[[ "$mode" != 'png' ]] && info 'recording'
record_$mode
[[ -e "$file" ]] || die 'error recording file'
info "saved as $file"

if [[ -n "$callback" ]]; then
  if [[ -x "${config_dir}/${callback%% *}" ]]; then
    $SHELL -c "$(parse_callback_str "$config_dir/$callback \$f")"
  else
    $SHELL -c "$(parse_callback_str "$callback")"
  fi
fi
