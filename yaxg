#!/usr/bin/env bash

declare file='%F-%s'
declare mode='webm'
declare select=0
declare duration
declare delay=0
declare verbose
declare callback
declare -a slop_args
declare -a config_err
declare -r config_dir="${XDG_CONFIG_DIR:-$HOME/.config}/yaxg"
declare -r config_file="${config_dir}/conf"
declare -A dimensions
declare -A colors
colors[red]=$(tput setaf 1)
colors[blue]=$(tput setaf 4)
colors[reset]=$(tput sgr0)

usage() {
  LESS=-FEXR less <<'HELP'
Usage: yaxg [OPTIONS] [FILE]
records and saves regions of X11 displays


OPTIONS:

  -d  specify duration to record for (only works for webms)
  -D  specify delay
  -F  overwrite file if it exists
  -s  select a region or window
  -S  pass a arguments directly to slop
  -e  execute a script in the config dir or a callback string with the current $SHELL
  -g  default to saving as gif (will be overridden by file extension)
  -p  default to saving as png (will be overridden by file extension)
  -w  default to saving as webm (will be overridden by file extension)
      this is the default behavior when -g or -p is not present and the
      filename doesn't end in png or gif
  -v  increase verbosity (can be stacked)
      first level will show errors parsing config file, consecutive levels
      will be passed to ffmpeg
  -h  print this help


SPECIAL STRINGS

Similar to `scrot`, the callback and filename parameters can take format
specifiers that are expanded when encountered. Characters preceded by
'%' are interpreted directly by the `date` commmand. See `man date` for examples.
Characters preceded by '$' are parsed by yaxg and expanded as such:

  $f  quoted image path/filename (only available in callback)
  $w  image width
  $h  image height


CONFIGURATION:

A configuration file can saved at $XDG_CONFIG_DIR/yaxg/conf
(defaults to $HOME/.config/yaxg/conf if XDG_CONFIG_DIR is not set)
If a line begins with '#' it is treated as a comment and ignored
The config file accepts the following values:

  callback
    a callback string to execute
  filename
    a default filename to use when none is provided (must not include extension)
  format
    default format to use, must be either 'png', 'webm', or 'gif'
  slop
    arguments to be passed to slop


EXAMPLES:

  yaxg '%s-$w-$h'
  yaxg '%s-$w-$h' -e 'mv $f ~/images/$f'
  yaxg -s -S '-l -c 0.3,0.4,0.6,0.4' -e 'mv $f ~/images/$f && firefox ~/images/$f'
  printf '#!/usr/bin/env bash\n[[ "$1" =~ png$ ]] && optipng "$1"\n' \
    > ~/.config/yaxg/myScript && chmod +x !#:3 && yaxg -e 'myScript'
HELP
}

in_term() {
  [[ -t 0 || -p /dev/stdin ]]
}

info() {
  local str
  if in_term; then
    printf "${colors[blue]}%s${colors[reset]}\n" "$@" > /dev/tty
  else
    str=$(printf '%s' "$@")
    notify-send 'yaxg' "$str"
  fi
}

err() {
  local str
  if in_term; then
    printf "${colors[red]}%s${colors[reset]}\n" "$@" >&2
  else
    str=$(printf '%s' "$@")
    notify-send -u critical 'yaxg' "$str"
  fi
}

die() {
  [[ -n "$1" ]] && err "$1"
  exit 1
}

has() {
  local v=0
  if [[ $1 = '-v' ]]; then
    v=1
    shift
  fi
  for c; do c="${c%% *}"
    if ! command -v "$c" &> /dev/null; then
      (( v > 0 )) && err "$c not found"
      return 1
    fi
  done
}

ask() {
  if in_term; then
    read -r -n1 -p "$* " ans
    printf '\n'
    [[ ${ans^} = Y* ]]
  else
    zenity --question --text="$*"
  fi
}

delay() {
  (( delay > 0 )) && for (( i=delay; i > 0; --i )); do
    (( verbose > 0 )) && if in_term; then
      printf '%s..                     \r' "$i" > /dev/tty
    else
      notify-send -t 1000 "$i"
    fi
    sleep 1
  done
}

get_dimensions() {
  local scrsize
  if (( select == 1 )); then
    has -v slop || die
    (( verbose > 0 )) && info 'select a region'
    scrsize=$(slop "${slop_args[@]}" -f "['x']='%x' ['y']='%y' ['w']='%w' ['h']='%h'") || die 'cancelled'
    eval "dimensions=( $scrsize )"
  else
    has -v xdpyinfo || die
    scrsize=$(xdpyinfo | awk '/dimensions/{print $2}')
    dimensions=( ['x']='0' ['y']='0' ['w']="${scrsize%%x*}" ['h']="${scrsize#*x}" )
  fi
}

record_gif() {
  byzanz-record \
    --duration="${duration:-10}" \
    --x="${dimensions['x']}" \
    --y="${dimensions['y']}" \
    --width="${dimensions['w']}" \
    --height="${dimensions['h']}" \
    "$file"
}

record_webm() {
  local loglevel size offset
  loglevel='fatal'
  (( verbose > 0 )) && loglevel=$(( 8 + verbose * 8 ))
  size="${dimensions['w']}x${dimensions['h']}"
  offset="${DISPLAY}.0+${dimensions['x']},${dimensions['y']}"
  ffmpeg -y -loglevel "$loglevel" \
    -f x11grab \
    -s "$size" \
    -i "$offset" \
    ${duration:+-t $duration} \
    -c:v libvpx \
    -b:v 2400k \
    -preset veryslow \
    -r 60 \
    -threads 4 \
    -pix_fmt yuv444p \
    -f webm "$file"
}

record_png() {
  local geometry
  printf -v geometry "%sx%s+%s+%s" "${dimensions[w]}" "${dimensions[h]}" "${dimensions[x]}" "${dimensions[y]}"
  maim -g "$geometry" "$file"
}

parse_file_str() {
  local str h w
  str=$(date +"$1")
  str="${str//\$h/${dimensions[h]}}"
  str="${str//\$w/${dimensions[w]}}"
  printf '%s' "$str"
}

parse_callback_str() {
  local str
  str=$(parse_file_str "$1")
  str="${str//\$f/\"$file\"}"
  printf '%s' "$str"
}

parse_config_file() {
  local line k v nr=0
  config_err=()
  while IFS= read -r line; do
    (( ++nr ))
    [[ -z "$line" || "$line" = '#'* ]] && continue
    k="${line%% *}"
    v="${line#* }"
    if [[ -z "$v" ]]; then
      config_err+=( "missing value for \"$k\" in config file on line $nr" )
      continue
    fi
    case "$k" in
      callback) callback="$v" ;;
      filename) file="$v" ;;
      format)
        if [[ $v =~ png|webm|gif ]]; then
          mode="$v"
        else
          config_err+=( "unknown format \"$v\" in config file on line $nr" )
        fi
        ;;
      slop) slop_args=( $v ) ;;
      *) config_err+=( "unknown key \"$k\" in config file on line $nr" )
    esac
  done
}

[[ -s "$config_file" ]] && parse_config_file < "$config_file"

OPTERR=0
while getopts "d:D:e:FghpsS:vw" opt; do
  case "$opt" in
    d) duration="$OPTARG" ;;
    D) delay="$OPTARG" ;;
    e) callback="$OPTARG" ;;
    F) overwrite=1 ;;
    g) mode='gif' ;;
    h) usage; exit 0 ;;
    p) mode='png' ;;
    s) select=1 ;;
    S) slop_args=( $OPTARG ) ;;
    v) (( ++verbose )) ;;
    w) mode='webm' ;;
  esac
done
shift $((OPTIND-1))

if (( $# == 1 )); then
  file="$1"
  shift
elif (( $# > 1 )); then
  die 'too many filenames arguments'
fi

if (( verbose > 0 && ${#config_err[@]} > 0 )); then
  err 'there were errors parsing config file:'
  for e in "${config_err[@]}"; do
    err "$e"
  done
fi

[[ -n "$DISPLAY" ]] || die 'Could not grab DISPLAY'
has -v date realpath || die

file=$(realpath -mL "$file")
mkdir -${verbose:+v}p "${file%/*}" || die "Could not open \"${file%/*}\" for writing."

if [[ -f "$file" ]] && (( overwrite == 0 )); then
  ask "\"$file\" already exists. Overwrite? " || die
fi

get_dimensions

case "$file" in
  *.gif)
    has byzanz-record || die 'need byzanz-record for recording gifs'
    mode='gif' ;;
  *.png)
    has maim || die 'need maim for capturing screenshots'
    mode='png' ;;
  *.webm)
    has ffmpeg || die 'need ffmpeg for recording webms'
    mode='webm' ;;
  *)
    case "$mode" in
      gif) file+='.gif' ;;
      webm) file+='.webm' ;;
      png) file+='.png' ;;
    esac
esac
file=$(parse_file_str "$file")

delay
[[ "$mode" != 'png' ]] && info 'recording'
"record_$mode"
[[ -e "$file" ]] || die 'error recording file'
info "saved as $file"

if [[ -n "$callback" ]]; then
  if [[ -x "${config_dir}/${callback%% *}" ]]; then
    $SHELL -ic "$(parse_callback_str "$config_dir/$callback \$f")"
  else
    $SHELL -ic "$(parse_callback_str "$callback")"
  fi
fi
